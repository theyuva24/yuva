rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /challenges/{challengeId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }

    // Allow users to read user profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;

      // Followers subcollection
      match /followers/{followerId} {
        allow read: if true;
        allow create: if request.auth != null
          && request.auth.uid == followerId
          && request.resource.data.keys().hasOnly(['followedAt']);
        allow delete: if request.auth != null && request.auth.uid == followerId;
      }

      // Following subcollection
      match /following/{followingId} {
        allow read: if true;
        allow create: if request.auth != null
          && request.auth.uid == userId
          && request.resource.data.keys().hasOnly(['followedAt']);
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- CHANGED: Colleges collection ---
    // --- TEMPORARY: Relaxed rules for testing ---
    match /colleges/{doc} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // --- ADDED: Courses collection (if you use it) ---
    match /courses/{doc} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.admin == true;
    }

    // --- ADDED: Pending college suggestions ---
    // --- TEMPORARY: Relaxed rules for testing ---
    match /pending_colleges/{doc} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // --- ADDED: Pending course suggestions ---
    match /pending_courses/{doc} {
      allow read: if request.auth != null && request.auth.token.admin == true;
      allow create: if request.auth != null;
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }

    match /interests/{doc} {
      allow read: if true;
      allow write: if false;
    }

    match /suggested_inputs/{doc} {
      allow read: if true;
      allow write: if false;
    }

    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.hubId is string &&
        request.resource.data.hubName is string &&
        request.resource.data.postContent is string &&
        (request.resource.data.postingTime is timestamp || request.resource.data.postingTime == request.time) &&
        request.resource.data.upvotes is number &&
        request.resource.data.downvotes is number &&
        request.resource.data.score is number &&
        request.resource.data.commentCount is number &&
        request.resource.data.shareCount is number &&
        (request.resource.data.postImageUrl == null || request.resource.data.postImageUrl is string) &&
        (request.resource.data.pollData == null || request.resource.data.pollData is map) &&
        (request.resource.data.linkUrl == null || request.resource.data.linkUrl is string) &&
        (request.resource.data.linkClickCount == null || request.resource.data.linkClickCount is number);

      allow update: if request.auth != null && (
        // Full update by post owner
        request.auth.uid == resource.data.userId ||
        // OR: partial update for engagement fields only
        (
          !request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'userId', 'hubId', 'hubName', 'postContent', 'postingTime', 'postImageUrl', 'pollData', 'linkUrl'
          ]) &&
          request.resource.data.keys().hasAny([
            'upvotes', 'downvotes', 'score', 'commentCount', 'shareCount', 'linkClickCount', 'lastSharedAt'
          ])
        )
      );

      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.commentContent is string &&
          (request.resource.data.commentTime is timestamp || request.resource.data.commentTime == request.time) &&
          request.resource.data.upvotes is number &&
          request.resource.data.downvotes is number &&
          request.resource.data.score is number &&
          (request.resource.data.parentCommentId == null || request.resource.data.parentCommentId is string);
        allow update: if request.auth != null &&
          request.auth.uid == resource.data.userId &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.commentTime == resource.data.commentTime &&
          request.resource.data.parentCommentId == resource.data.parentCommentId;

        match /voteInteractions/{interactionId} {
          allow read: if true;
          allow create: if request.auth != null && 
            request.resource.data.userId == request.auth.uid &&
            request.resource.data.voteType in ['upvote', 'downvote'];
          allow update: if request.auth != null && 
            request.auth.uid == resource.data.userId &&
            request.resource.data.userId == request.auth.uid &&
            request.resource.data.voteType in ['upvote', 'downvote'];
          allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
        }
      }

      match /pollInteractions/{interactionId} {
        allow read: if true;
        allow create: if request.auth != null &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.selectedOption is number &&
          (request.resource.data.interactionTime is timestamp || request.resource.data.interactionTime == request.time);
        allow update: if request.auth != null &&
          request.auth.uid == resource.data.userId &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.interactionTime == resource.data.interactionTime;
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      match /voteInteractions/{interactionId} {
        allow read: if true;
        allow create: if request.auth != null &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.voteType in ['upvote', 'downvote'];
        allow update: if request.auth != null &&
          request.auth.uid == resource.data.userId &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.voteType in ['upvote', 'downvote'];
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      match /shareInteractions/{interactionId} {
        allow read: if true;
        allow create: if request.auth != null &&
          request.resource.data.userId == request.auth.uid &&
          (request.resource.data.shareTime is timestamp || request.resource.data.shareTime == request.time) &&
          (request.resource.data.sharePlatform == null || request.resource.data.sharePlatform is string);
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      match /pollVotes/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    match /chats/{chatId} {
      allow read, update, delete: if request.auth != null &&
        resource.data.participants != null &&
        request.auth.uid in resource.data.participants;
      allow create: if request.auth != null &&
        request.resource.data.participants != null &&
        request.auth.uid in request.resource.data.participants;

      match /messages/{messageId} {
        allow read, write: if request.auth != null &&
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    match /hubs/{hubId}/messages/{messageId} {
      allow read, write: if request.auth != null &&
        (hubId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.joinedHubs);
    }

    match /reported_posts/{reportId} {
      allow create: if request.auth != null &&
        request.resource.data.postId is string &&
        request.resource.data.reportedBy == request.auth.uid &&
        (request.resource.data.reportedAt is timestamp || request.resource.data.reportedAt == request.time) &&
        request.resource.data.reason is string;
      allow read, update, delete: if false;
    }

    // --- Hubs collection (capital H) - not used by app, can be removed or commented out ---
    // match /Hubs/{hubId} {
    //   allow read: if request.auth != null;
    //   allow create: if request.auth != null;
    // }

    // --- hubs collection (lowercase) ---
    match /hubs/{hubId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.name is string &&
        request.resource.data.description is string &&
        request.resource.data.imageUrl is string;
      allow update, delete: if request.auth != null &&
        (request.auth.uid == resource.data.createdBy || request.auth.token.admin == true);
    }

    match /challenge_submission/{submissionId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null;
    }
  }
}
