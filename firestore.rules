rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Challenges: anyone can read, only authenticated users can create
    match /challenges/{challengeId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }

    // User profiles: /users/{uid} - with phone number query permission
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow phone number queries for authentication (when user is not yet authenticated)
    // This is a simpler approach that allows any query on the users collection
    // but only when the user is not authenticated (for phone verification)
    match /users/{document=**} {
      allow list: if request.auth != null || 
        (request.query.limit <= 1);
    }

    // Colleges, interests, suggested_inputs: public read, no write except by admins
    match /colleges/{doc} {
      allow read: if true;
      allow write: if false;
    }
    match /interests/{doc} {
      allow read: if true;
      allow write: if false;
    }
    match /suggested_inputs/{doc} {
      allow read: if true;
      allow write: if false;
    }

    // Posts: /posts/{postId}
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.hubId is string &&
        request.resource.data.hubName is string &&
        request.resource.data.postContent is string &&
        (request.resource.data.postingTime is timestamp || request.resource.data.postingTime == request.time) &&
        request.resource.data.upvotes is number &&
        request.resource.data.downvotes is number &&
        request.resource.data.score is number &&
        request.resource.data.commentCount is number &&
        request.resource.data.shareCount is number &&
        (request.resource.data.postImageUrl == null || request.resource.data.postImageUrl is string) &&
        (request.resource.data.pollData == null || request.resource.data.pollData is map) &&
        (request.resource.data.linkUrl == null || request.resource.data.linkUrl is string) &&
        (request.resource.data.linkClickCount == null || request.resource.data.linkClickCount is number);

      allow update: if request.auth != null && (
        // Allow the post owner to update anything
        request.auth.uid == resource.data.userId
        // OR allow anyone to update only engagement fields (partial update)
        || (
          // No attempt to update protected fields
          !(request.resource.data.keys().hasAny([
            'userId', 'hubId', 'hubName', 'postContent', 'postingTime', 'postImageUrl', 'pollData', 'linkUrl'
          ])) &&
          // Must be updating at least one engagement field
          request.resource.data.keys().hasAny([
            'upvotes', 'downvotes', 'score', 'commentCount', 'shareCount', 'linkClickCount', 'lastSharedAt'
          ])
        )
      );
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;

      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.commentContent is string &&
          (request.resource.data.commentTime is timestamp || request.resource.data.commentTime == request.time) &&
          request.resource.data.upvotes is number &&
          request.resource.data.downvotes is number &&
          request.resource.data.score is number &&
          (request.resource.data.parentCommentId == null || request.resource.data.parentCommentId is string);
        allow update: if request.auth != null && 
          request.auth.uid == resource.data.userId &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.commentTime == resource.data.commentTime &&
          request.resource.data.parentCommentId == resource.data.parentCommentId;
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      // Poll interactions subcollection
      match /pollInteractions/{interactionId} {
        allow read: if true;
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.selectedOption is number &&
          (request.resource.data.interactionTime is timestamp || request.resource.data.interactionTime == request.time);
        allow update: if request.auth != null && 
          request.auth.uid == resource.data.userId &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.interactionTime == resource.data.interactionTime;
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      // Vote interactions subcollection
      match /voteInteractions/{interactionId} {
        allow read: if true;
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.voteType in ['upvote', 'downvote'];
        allow update: if request.auth != null && 
          request.auth.uid == resource.data.userId &&
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.voteType in ['upvote', 'downvote'];
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }

      // Share interactions subcollection
      match /shareInteractions/{interactionId} {
        allow read: if true;
        allow create: if request.auth != null && 
          request.resource.data.userId == request.auth.uid &&
          (request.resource.data.shareTime is timestamp || request.resource.data.shareTime == request.time) &&
          (request.resource.data.sharePlatform == null || request.resource.data.sharePlatform is string);
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
      }
    }

    // Chats: /chats/{chatId}
    match /chats/{chatId} {
      // Allow read, update, delete if the user is a participant
      allow read, update, delete: if request.auth != null
        && resource.data.participants != null
        && request.auth.uid in resource.data.participants;

      // Allow create if the user is authenticated and is adding themselves as a participant
      allow create: if request.auth != null
        && request.resource.data.participants != null
        && request.auth.uid in request.resource.data.participants;

      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null
          && exists(/databases/$(database)/documents/chats/$(chatId))
          && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }

    // Reported posts: /reported_posts/{reportId}
    match /reported_posts/{reportId} {
      allow create: if request.auth != null
        && request.resource.data.postId is string
        && request.resource.data.reportedBy == request.auth.uid
        && (request.resource.data.reportedAt is timestamp || request.resource.data.reportedAt == request.time)
        && request.resource.data.reason is string;
      allow read, update, delete: if false;
    }

    // Hubs: /Hubs/{hubId} (TOP-LEVEL, for your app's collection)
    match /Hubs/{hubId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }

    // Hubs: /hubs/{hubId} (if you ever use lowercase in the future)
    match /hubs/{hubId} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.resource.data.hubName is string &&
        request.resource.data.hubDescription is string &&
        request.resource.data.createdBy is string &&
        (request.resource.data.createdTime is timestamp || request.resource.data.createdTime == request.time) &&
        request.resource.data.memberCount is number;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy || request.auth.token.admin == true);
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy || request.auth.token.admin == true);
    }

    // Challenge submissions
    match /challenge_submission/{submissionId} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Notifications: only recipient can read/update/delete, any authenticated user can create
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.recipientId;
      allow create: if request.auth != null;
    }
  }
} 